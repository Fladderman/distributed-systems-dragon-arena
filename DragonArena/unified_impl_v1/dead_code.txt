
# if msg.sender in self._clients:
#     c_sock = self._clients[msg.sender]
#     response = messaging.M_S2C_WELCOME(self._server_id)
#     print('response', response)
#     messaging.write_msg_to(c_sock, response)
#     print('popping')
#     self._clients.pop(msg.sender)





#server_id == index
   '''step1. handshake with all other servers'''
   self._server_id = server_id
   self._accepting_clients = False;
   self._kick_off_acceptor() # will still accept servers!
   self._serv_sockets = self._connect_to_other_servers()
   print('_serv_sockets:', self._serv_sockets)
   id_of_authority_server = next( (x for x in self._serv_sockets if x!=None), None)
   if id_of_authority_server == None:
       # I am the first!
       print(' I am the first server! #newyearnewme')
       self._game_state = Server.create_fresh_arena()
       tick_id = 0
   else:
       # I am joining a game in progress!
       print(' I have joined a game in progress. Will sync with', id_of_authority_server)
       self._game_state = self._sync_with_server(self._serv_sockets[id_of_authority_server])
       pass

   print('id_of_authority_server:', id_of_authority_server)
   self._game_state = Server.create_fresh_arena()\
       if id_of_authority_server==None\
       else self._get_state_from(self._serv_sockets[id_of_authority_server])

   #addr --> socket
   self._newcomers = dict() # connections that haven't been associated with servers or clients yet
   self._clients = dict()

   self._requests = protected.ProtectedQueue()

   print('done')
   my_port = das_game_settings.server_addresses[self._server_id][1]
   print('my_port', my_port)

   self._accepting_clients = True;
   print('setup done')
